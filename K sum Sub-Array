import java.util.*;

public class Main {

    public static void main(String[] args) {

        int[] array = {1,2,3,-6,5,-6};
        int k = 3;
        boolean found = false;
        
        // NATIVE APPROACH
        // TIME COMPLEXITY  O(N^2)
        for (int i=0; i<array.length; i++){
            int sum = 0;
            for (int j=i;j<array.length; j++){
                sum += array[j];
                if (sum == k){
                    found = true;
                    break;
                }
            }if (found){
                break;
            }
        }
        
/////////////////////////////////////////////////////////////////////////////////////////////////////////

        
        // USING SETS
        // REDUCING TIME COMPLEXITY TO  O(N)
        
        Set<Integer> set = new HashSet<>();
        int sum = 0;
        for (int i : array){
            set.add(sum);
            sum += i;
            if (set.contains(sum-k)){
                found = true;
                break;
            }
        }
        System.out.println(found);
    }
}
